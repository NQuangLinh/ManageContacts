#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ManageContact.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DBManageContacts")]
	public partial class DBManageContactDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertAdmin(Admin instance);
    partial void UpdateAdmin(Admin instance);
    partial void DeleteAdmin(Admin instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertNetworkOperator(NetworkOperator instance);
    partial void UpdateNetworkOperator(NetworkOperator instance);
    partial void DeleteNetworkOperator(NetworkOperator instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    #endregion
		
		public DBManageContactDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["DBManageContactsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBManageContactDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBManageContactDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBManageContactDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBManageContactDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<Admin> Admins
		{
			get
			{
				return this.GetTable<Admin>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<NetworkOperator> NetworkOperators
		{
			get
			{
				return this.GetTable<NetworkOperator>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contact")]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDContact;
		
		private int _IDCustomer;
		
		private string _ContactName;
		
		private int _PhoneNumber;
		
		private System.Nullable<int> _IDNetworkOperator;
		
		private System.Nullable<int> _IDPosition;
		
		private System.Nullable<int> _IDAddress;
		
		private System.DateTime _UpdateTime;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<NetworkOperator> _NetworkOperator;
		
		private EntityRef<Position> _Position;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDContactChanging(int value);
    partial void OnIDContactChanged();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnContactNameChanging(string value);
    partial void OnContactNameChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnIDNetworkOperatorChanging(System.Nullable<int> value);
    partial void OnIDNetworkOperatorChanged();
    partial void OnIDPositionChanging(System.Nullable<int> value);
    partial void OnIDPositionChanged();
    partial void OnIDAddressChanging(System.Nullable<int> value);
    partial void OnIDAddressChanged();
    partial void OnUpdateTimeChanging(System.DateTime value);
    partial void OnUpdateTimeChanged();
    #endregion
		
		public Contact()
		{
			this._Address = default(EntityRef<Address>);
			this._Customer = default(EntityRef<Customer>);
			this._NetworkOperator = default(EntityRef<NetworkOperator>);
			this._Position = default(EntityRef<Position>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDContact", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDContact
		{
			get
			{
				return this._IDContact;
			}
			set
			{
				if ((this._IDContact != value))
				{
					this.OnIDContactChanging(value);
					this.SendPropertyChanging();
					this._IDContact = value;
					this.SendPropertyChanged("IDContact");
					this.OnIDContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", DbType="Int NOT NULL")]
		public int IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ContactName
		{
			get
			{
				return this._ContactName;
			}
			set
			{
				if ((this._ContactName != value))
				{
					this.OnContactNameChanging(value);
					this.SendPropertyChanging();
					this._ContactName = value;
					this.SendPropertyChanged("ContactName");
					this.OnContactNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNetworkOperator", DbType="Int")]
		public System.Nullable<int> IDNetworkOperator
		{
			get
			{
				return this._IDNetworkOperator;
			}
			set
			{
				if ((this._IDNetworkOperator != value))
				{
					if (this._NetworkOperator.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDNetworkOperatorChanging(value);
					this.SendPropertyChanging();
					this._IDNetworkOperator = value;
					this.SendPropertyChanged("IDNetworkOperator");
					this.OnIDNetworkOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPosition", DbType="Int")]
		public System.Nullable<int> IDPosition
		{
			get
			{
				return this._IDPosition;
			}
			set
			{
				if ((this._IDPosition != value))
				{
					if (this._Position.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDPositionChanging(value);
					this.SendPropertyChanging();
					this._IDPosition = value;
					this.SendPropertyChanged("IDPosition");
					this.OnIDPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAddress", DbType="Int")]
		public System.Nullable<int> IDAddress
		{
			get
			{
				return this._IDAddress;
			}
			set
			{
				if ((this._IDAddress != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAddressChanging(value);
					this.SendPropertyChanging();
					this._IDAddress = value;
					this.SendPropertyChanged("IDAddress");
					this.OnIDAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UpdateTime", DbType="DateTime NOT NULL")]
		public System.DateTime UpdateTime
		{
			get
			{
				return this._UpdateTime;
			}
			set
			{
				if ((this._UpdateTime != value))
				{
					this.OnUpdateTimeChanging(value);
					this.SendPropertyChanging();
					this._UpdateTime = value;
					this.SendPropertyChanged("UpdateTime");
					this.OnUpdateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Contact", Storage="_Address", ThisKey="IDAddress", OtherKey="IDAddress", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._IDAddress = value.IDAddress;
					}
					else
					{
						this._IDAddress = default(Nullable<int>);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Contact", Storage="_Customer", ThisKey="IDCustomer", OtherKey="IDCustomer", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._IDCustomer = value.IDCustomer;
					}
					else
					{
						this._IDCustomer = default(int);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetworkOperator_Contact", Storage="_NetworkOperator", ThisKey="IDNetworkOperator", OtherKey="IDNetworkOperator", IsForeignKey=true)]
		public NetworkOperator NetworkOperator
		{
			get
			{
				return this._NetworkOperator.Entity;
			}
			set
			{
				NetworkOperator previousValue = this._NetworkOperator.Entity;
				if (((previousValue != value) 
							|| (this._NetworkOperator.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NetworkOperator.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._NetworkOperator.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._IDNetworkOperator = value.IDNetworkOperator;
					}
					else
					{
						this._IDNetworkOperator = default(Nullable<int>);
					}
					this.SendPropertyChanged("NetworkOperator");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Contact", Storage="_Position", ThisKey="IDPosition", OtherKey="IDPosition", IsForeignKey=true)]
		public Position Position
		{
			get
			{
				return this._Position.Entity;
			}
			set
			{
				Position previousValue = this._Position.Entity;
				if (((previousValue != value) 
							|| (this._Position.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Position.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._Position.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._IDPosition = value.IDPosition;
					}
					else
					{
						this._IDPosition = default(Nullable<int>);
					}
					this.SendPropertyChanged("Position");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAccount;
		
		private string _Username;
		
		private string _Password;
		
		private EntitySet<Admin> _Admins;
		
		private EntitySet<Customer> _Customers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAccountChanging(int value);
    partial void OnIDAccountChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Account()
		{
			this._Admins = new EntitySet<Admin>(new Action<Admin>(this.attach_Admins), new Action<Admin>(this.detach_Admins));
			this._Customers = new EntitySet<Customer>(new Action<Customer>(this.attach_Customers), new Action<Customer>(this.detach_Customers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccount", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAccount
		{
			get
			{
				return this._IDAccount;
			}
			set
			{
				if ((this._IDAccount != value))
				{
					this.OnIDAccountChanging(value);
					this.SendPropertyChanging();
					this._IDAccount = value;
					this.SendPropertyChanged("IDAccount");
					this.OnIDAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(16) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Admin", Storage="_Admins", ThisKey="IDAccount", OtherKey="IDAccount")]
		public EntitySet<Admin> Admins
		{
			get
			{
				return this._Admins;
			}
			set
			{
				this._Admins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Customers", ThisKey="IDAccount", OtherKey="IDAccount")]
		public EntitySet<Customer> Customers
		{
			get
			{
				return this._Customers;
			}
			set
			{
				this._Customers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Admins(Admin entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Customers(Customer entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAddress;
		
		private string _AddressName;
		
		private int _AddressAmount;
		
		private int _IndexCustomer;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAddressChanging(int value);
    partial void OnIDAddressChanged();
    partial void OnAddressNameChanging(string value);
    partial void OnAddressNameChanged();
    partial void OnAddressAmountChanging(int value);
    partial void OnAddressAmountChanged();
    partial void OnIndexCustomerChanging(int value);
    partial void OnIndexCustomerChanged();
    #endregion
		
		public Address()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAddress", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAddress
		{
			get
			{
				return this._IDAddress;
			}
			set
			{
				if ((this._IDAddress != value))
				{
					this.OnIDAddressChanging(value);
					this.SendPropertyChanging();
					this._IDAddress = value;
					this.SendPropertyChanged("IDAddress");
					this.OnIDAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AddressName
		{
			get
			{
				return this._AddressName;
			}
			set
			{
				if ((this._AddressName != value))
				{
					this.OnAddressNameChanging(value);
					this.SendPropertyChanging();
					this._AddressName = value;
					this.SendPropertyChanged("AddressName");
					this.OnAddressNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AddressAmount", DbType="Int NOT NULL")]
		public int AddressAmount
		{
			get
			{
				return this._AddressAmount;
			}
			set
			{
				if ((this._AddressAmount != value))
				{
					this.OnAddressAmountChanging(value);
					this.SendPropertyChanging();
					this._AddressAmount = value;
					this.SendPropertyChanged("AddressAmount");
					this.OnAddressAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexCustomer", DbType="Int NOT NULL")]
		public int IndexCustomer
		{
			get
			{
				return this._IndexCustomer;
			}
			set
			{
				if ((this._IndexCustomer != value))
				{
					this.OnIndexCustomerChanging(value);
					this.SendPropertyChanging();
					this._IndexCustomer = value;
					this.SendPropertyChanged("IndexCustomer");
					this.OnIndexCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Address_Contact", Storage="_Contacts", ThisKey="IDAddress", OtherKey="IDAddress")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Admin")]
	public partial class Admin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDAdmin;
		
		private string _AdminName;
		
		private bool _Gender;
		
		private int _PhoneNumber;
		
		private string _Email;
		
		private string _Address;
		
		private int _IDAccount;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDAdminChanging(int value);
    partial void OnIDAdminChanged();
    partial void OnAdminNameChanging(string value);
    partial void OnAdminNameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIDAccountChanging(int value);
    partial void OnIDAccountChanged();
    #endregion
		
		public Admin()
		{
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAdmin", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDAdmin
		{
			get
			{
				return this._IDAdmin;
			}
			set
			{
				if ((this._IDAdmin != value))
				{
					this.OnIDAdminChanging(value);
					this.SendPropertyChanging();
					this._IDAdmin = value;
					this.SendPropertyChanged("IDAdmin");
					this.OnIDAdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string AdminName
		{
			get
			{
				return this._AdminName;
			}
			set
			{
				if ((this._AdminName != value))
				{
					this.OnAdminNameChanging(value);
					this.SendPropertyChanging();
					this._AdminName = value;
					this.SendPropertyChanged("AdminName");
					this.OnAdminNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccount", DbType="Int NOT NULL")]
		public int IDAccount
		{
			get
			{
				return this._IDAccount;
			}
			set
			{
				if ((this._IDAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountChanging(value);
					this.SendPropertyChanging();
					this._IDAccount = value;
					this.SendPropertyChanged("IDAccount");
					this.OnIDAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Admin", Storage="_Account", ThisKey="IDAccount", OtherKey="IDAccount", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Admins.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Admins.Add(this);
						this._IDAccount = value.IDAccount;
					}
					else
					{
						this._IDAccount = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDCustomer;
		
		private string _CustomerName;
		
		private bool _Gender;
		
		private int _PhoneNumber;
		
		private string _Email;
		
		private string _Address;
		
		private int _IDAccount;
		
		private EntitySet<Contact> _Contacts;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDCustomerChanging(int value);
    partial void OnIDCustomerChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnGenderChanging(bool value);
    partial void OnGenderChanged();
    partial void OnPhoneNumberChanging(int value);
    partial void OnPhoneNumberChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnIDAccountChanging(int value);
    partial void OnIDAccountChanged();
    #endregion
		
		public Customer()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDCustomer", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDCustomer
		{
			get
			{
				return this._IDCustomer;
			}
			set
			{
				if ((this._IDCustomer != value))
				{
					this.OnIDCustomerChanging(value);
					this.SendPropertyChanging();
					this._IDCustomer = value;
					this.SendPropertyChanged("IDCustomer");
					this.OnIDCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="Bit NOT NULL")]
		public bool Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="Int NOT NULL")]
		public int PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDAccount", DbType="Int NOT NULL")]
		public int IDAccount
		{
			get
			{
				return this._IDAccount;
			}
			set
			{
				if ((this._IDAccount != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDAccountChanging(value);
					this.SendPropertyChanging();
					this._IDAccount = value;
					this.SendPropertyChanged("IDAccount");
					this.OnIDAccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_Contact", Storage="_Contacts", ThisKey="IDCustomer", OtherKey="IDCustomer")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Customer", Storage="_Account", ThisKey="IDAccount", OtherKey="IDAccount", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Customers.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Customers.Add(this);
						this._IDAccount = value.IDAccount;
					}
					else
					{
						this._IDAccount = default(int);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NetworkOperator")]
	public partial class NetworkOperator : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDNetworkOperator;
		
		private string _NetworkOperatorName;
		
		private int _NetworkOperatorAmount;
		
		private int _IndexCustomer;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDNetworkOperatorChanging(int value);
    partial void OnIDNetworkOperatorChanged();
    partial void OnNetworkOperatorNameChanging(string value);
    partial void OnNetworkOperatorNameChanged();
    partial void OnNetworkOperatorAmountChanging(int value);
    partial void OnNetworkOperatorAmountChanged();
    partial void OnIndexCustomerChanging(int value);
    partial void OnIndexCustomerChanged();
    #endregion
		
		public NetworkOperator()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDNetworkOperator", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDNetworkOperator
		{
			get
			{
				return this._IDNetworkOperator;
			}
			set
			{
				if ((this._IDNetworkOperator != value))
				{
					this.OnIDNetworkOperatorChanging(value);
					this.SendPropertyChanging();
					this._IDNetworkOperator = value;
					this.SendPropertyChanged("IDNetworkOperator");
					this.OnIDNetworkOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkOperatorName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string NetworkOperatorName
		{
			get
			{
				return this._NetworkOperatorName;
			}
			set
			{
				if ((this._NetworkOperatorName != value))
				{
					this.OnNetworkOperatorNameChanging(value);
					this.SendPropertyChanging();
					this._NetworkOperatorName = value;
					this.SendPropertyChanged("NetworkOperatorName");
					this.OnNetworkOperatorNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NetworkOperatorAmount", DbType="Int NOT NULL")]
		public int NetworkOperatorAmount
		{
			get
			{
				return this._NetworkOperatorAmount;
			}
			set
			{
				if ((this._NetworkOperatorAmount != value))
				{
					this.OnNetworkOperatorAmountChanging(value);
					this.SendPropertyChanging();
					this._NetworkOperatorAmount = value;
					this.SendPropertyChanged("NetworkOperatorAmount");
					this.OnNetworkOperatorAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexCustomer", DbType="Int NOT NULL")]
		public int IndexCustomer
		{
			get
			{
				return this._IndexCustomer;
			}
			set
			{
				if ((this._IndexCustomer != value))
				{
					this.OnIndexCustomerChanging(value);
					this.SendPropertyChanging();
					this._IndexCustomer = value;
					this.SendPropertyChanged("IndexCustomer");
					this.OnIndexCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NetworkOperator_Contact", Storage="_Contacts", ThisKey="IDNetworkOperator", OtherKey="IDNetworkOperator")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.NetworkOperator = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.NetworkOperator = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPosition;
		
		private string _PositionName;
		
		private int _PositionAmount;
		
		private int _IndexCustomer;
		
		private EntitySet<Contact> _Contacts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPositionChanging(int value);
    partial void OnIDPositionChanged();
    partial void OnPositionNameChanging(string value);
    partial void OnPositionNameChanged();
    partial void OnPositionAmountChanging(int value);
    partial void OnPositionAmountChanged();
    partial void OnIndexCustomerChanging(int value);
    partial void OnIndexCustomerChanged();
    #endregion
		
		public Position()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPosition", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPosition
		{
			get
			{
				return this._IDPosition;
			}
			set
			{
				if ((this._IDPosition != value))
				{
					this.OnIDPositionChanging(value);
					this.SendPropertyChanging();
					this._IDPosition = value;
					this.SendPropertyChanged("IDPosition");
					this.OnIDPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PositionName
		{
			get
			{
				return this._PositionName;
			}
			set
			{
				if ((this._PositionName != value))
				{
					this.OnPositionNameChanging(value);
					this.SendPropertyChanging();
					this._PositionName = value;
					this.SendPropertyChanged("PositionName");
					this.OnPositionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PositionAmount", DbType="Int NOT NULL")]
		public int PositionAmount
		{
			get
			{
				return this._PositionAmount;
			}
			set
			{
				if ((this._PositionAmount != value))
				{
					this.OnPositionAmountChanging(value);
					this.SendPropertyChanging();
					this._PositionAmount = value;
					this.SendPropertyChanged("PositionAmount");
					this.OnPositionAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IndexCustomer", DbType="Int NOT NULL")]
		public int IndexCustomer
		{
			get
			{
				return this._IndexCustomer;
			}
			set
			{
				if ((this._IndexCustomer != value))
				{
					this.OnIndexCustomerChanging(value);
					this.SendPropertyChanging();
					this._IndexCustomer = value;
					this.SendPropertyChanged("IndexCustomer");
					this.OnIndexCustomerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Position_Contact", Storage="_Contacts", ThisKey="IDPosition", OtherKey="IDPosition")]
		public EntitySet<Contact> Contacts
		{
			get
			{
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Position = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.Position = null;
		}
	}
}
#pragma warning restore 1591
